data, _ := ioutil.ReadFile("yocto+meta-arm_3753.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
data, _ = ioutil.ReadFile("yocto+meta-arm_4915.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
data, _ = ioutil.ReadFile("3212.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
data, _ = ioutil.ReadFile("8201.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
data, _ = ioutil.ReadFile("1426647.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
data, _ = ioutil.ReadFile("62454.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
data, _ = ioutil.ReadFile("yocto+meta-arm_2742.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
data, _ = ioutil.ReadFile("risc-v+tech-virt-mem_77768.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
data, _ = ioutil.ReadFile("spdx+Spdx-tech_12382.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
data, _ = ioutil.ReadFile("spdx+Spdx-tech_11160.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
data, _ = ioutil.ReadFile("tungsten+marketing_66343.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
data, _ = ioutil.ReadFile("openswitch+dev_479180.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
data, _ = ioutil.ReadFile("openswitch+dev_164359.mbox")
_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
os.Exit(1)

	dbg := ctx.Debug
	ctx.Debug = 0
	fns, err := lib.ExecCommand(&ctx, []string{"find", ".", "-iname", "*.mbox"})
	lib.FatalOnError(err)
	ctx.Debug = dbg
	for _, fn := range strings.Split(fns, "\n") {
		if fn == "" {
			continue
		}
		if strings.HasPrefix(fn, "xxx") {
			continue
		}
		data, err := ioutil.ReadFile(fn)
		lib.FatalOnError(err)
		fmt.Printf("%s\n", fn)
		_, _, _ = lib.ParseMBoxMsg(&ctx, "xxx", data)
	}
	os.Exit(1)

	sdts := []string{
		"Mon, 30  Sep 2019  15:15:39 +0000",
		"TUE, 1 oCt 2019   15:15:39 -1200",
		"23 Dec  2013 14:51:30 gmt",
		"> Tue, 02 Jul 2013 02:28:30 GMT",
		"2017-04-03 09:52:03 -0700",
		"2017-11-19 09:52:03 -1000",
		">>\t Wed,  29  Jan  2003 16:55 +0000 (Pacific Standard Time)",
	}
	for _, sdt := range sdts {
		dt, ok := lib.ParseMBoxDate(sdt)
		if !ok {
			lib.Printf("unable to parse date from '%s'\n", sdt)
		} else {
			lib.Printf("'%s' parsed to %v\n", sdt, dt)
		}
	}
	os.Exit(1)

	// FIXME: start
	dbg := ctx.Debug
	ctx.Debug = 0
	fns, err := lib.ExecCommand(&ctx, []string{"find", "/root/mbox/", "-iname", "*.mbox"})
	lib.FatalOnError(err)
	ctx.Debug = dbg
	for _, fn := range strings.Split(fns, "\n") {
		if fn == "" {
			continue
		}
		if strings.HasPrefix(fn, "xxx") {
			continue
		}
		data, err := ioutil.ReadFile(fn)
		lib.FatalOnError(err)
		_, _, _ = lib.ParseMBoxMsg(&ctx, fn, data)
	}
	os.Exit(1)
	// FIXME: end
  /*
	rich["Received"], ok = getIValue("received")
	rich["Received"], ok = getIValue("RECEIVED")
	rich["Received"], ok = getIValue("xxx")
	rich["Received"], ok = getIValue("date")
	rich["Received"], ok = getIValue("MBox-Valid")
	rich["Received"], ok = getIValue("mbox-n-lines")
  */
