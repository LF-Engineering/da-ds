// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	dads "github.com/LF-Engineering/da-ds"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// DS is an autogenerated mock type for the DS type
type DS struct {
	mock.Mock
}

// AddMetadata provides a mock function with given fields: _a0, _a1
func (_m *DS) AddMetadata(_a0 *dads.Ctx, _a1 interface{}) map[string]interface{} {
	ret := _m.Called(_a0, _a1)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(*dads.Ctx, interface{}) map[string]interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// AffsItems provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *DS) AffsItems(_a0 *dads.Ctx, _a1 map[string]interface{}, _a2 []string, _a3 interface{}) (map[string]interface{}, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(*dads.Ctx, map[string]interface{}, []string, interface{}) map[string]interface{}); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dads.Ctx, map[string]interface{}, []string, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllRoles provides a mock function with given fields: _a0, _a1
func (_m *DS) AllRoles(_a0 *dads.Ctx, _a1 map[string]interface{}) ([]string, bool) {
	ret := _m.Called(_a0, _a1)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*dads.Ctx, map[string]interface{}) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*dads.Ctx, map[string]interface{}) bool); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// CalculateTimeToReset provides a mock function with given fields: _a0, _a1, _a2
func (_m *DS) CalculateTimeToReset(_a0 *dads.Ctx, _a1 int, _a2 int) int {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 int
	if rf, ok := ret.Get(0).(func(*dads.Ctx, int, int) int); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Categories provides a mock function with given fields:
func (_m *DS) Categories() map[string]struct{} {
	ret := _m.Called()

	var r0 map[string]struct{}
	if rf, ok := ret.Get(0).(func() map[string]struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]struct{})
		}
	}

	return r0
}

// CustomEnrich provides a mock function with given fields:
func (_m *DS) CustomEnrich() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CustomFetchRaw provides a mock function with given fields:
func (_m *DS) CustomFetchRaw() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DateField provides a mock function with given fields: _a0
func (_m *DS) DateField(_a0 *dads.Ctx) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*dads.Ctx) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ElasticRawMapping provides a mock function with given fields:
func (_m *DS) ElasticRawMapping() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// ElasticRichMapping provides a mock function with given fields:
func (_m *DS) ElasticRichMapping() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Enrich provides a mock function with given fields: _a0
func (_m *DS) Enrich(_a0 *dads.Ctx) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dads.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnrichItem provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *DS) EnrichItem(_a0 *dads.Ctx, _a1 map[string]interface{}, _a2 string, _a3 bool, _a4 interface{}) (map[string]interface{}, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(*dads.Ctx, map[string]interface{}, string, bool, interface{}) map[string]interface{}); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dads.Ctx, map[string]interface{}, string, bool, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnrichItems provides a mock function with given fields: _a0
func (_m *DS) EnrichItems(_a0 *dads.Ctx) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dads.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchItems provides a mock function with given fields: _a0
func (_m *DS) FetchItems(_a0 *dads.Ctx) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dads.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchRaw provides a mock function with given fields: _a0
func (_m *DS) FetchRaw(_a0 *dads.Ctx) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dads.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetItemIdentities provides a mock function with given fields: _a0, _a1
func (_m *DS) GetItemIdentities(_a0 *dads.Ctx, _a1 interface{}) (map[[3]string]struct{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 map[[3]string]struct{}
	if rf, ok := ret.Get(0).(func(*dads.Ctx, interface{}) map[[3]string]struct{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[[3]string]struct{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dads.Ctx, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleIdentity provides a mock function with given fields: _a0, _a1, _a2
func (_m *DS) GetRoleIdentity(_a0 *dads.Ctx, _a1 map[string]interface{}, _a2 string) map[string]interface{} {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(*dads.Ctx, map[string]interface{}, string) map[string]interface{}); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// HasIdentities provides a mock function with given fields:
func (_m *DS) HasIdentities() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Info provides a mock function with given fields:
func (_m *DS) Info() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ItemCategory provides a mock function with given fields: _a0
func (_m *DS) ItemCategory(_a0 interface{}) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ItemID provides a mock function with given fields: _a0
func (_m *DS) ItemID(_a0 interface{}) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ItemUpdatedOn provides a mock function with given fields: _a0
func (_m *DS) ItemUpdatedOn(_a0 interface{}) time.Time {
	ret := _m.Called(_a0)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(interface{}) time.Time); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *DS) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OffsetField provides a mock function with given fields: _a0
func (_m *DS) OffsetField(_a0 *dads.Ctx) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*dads.Ctx) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Origin provides a mock function with given fields: _a0
func (_m *DS) Origin(_a0 *dads.Ctx) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*dads.Ctx) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OriginField provides a mock function with given fields: _a0
func (_m *DS) OriginField(_a0 *dads.Ctx) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*dads.Ctx) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ParseArgs provides a mock function with given fields: _a0
func (_m *DS) ParseArgs(_a0 *dads.Ctx) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dads.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResumeNeedsCategory provides a mock function with given fields: _a0, _a1
func (_m *DS) ResumeNeedsCategory(_a0 *dads.Ctx, _a1 bool) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*dads.Ctx, bool) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ResumeNeedsOrigin provides a mock function with given fields: _a0, _a1
func (_m *DS) ResumeNeedsOrigin(_a0 *dads.Ctx, _a1 bool) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*dads.Ctx, bool) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RichAuthorField provides a mock function with given fields: _a0
func (_m *DS) RichAuthorField(_a0 *dads.Ctx) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*dads.Ctx) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RichIDField provides a mock function with given fields: _a0
func (_m *DS) RichIDField(_a0 *dads.Ctx) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*dads.Ctx) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SupportDateFrom provides a mock function with given fields:
func (_m *DS) SupportDateFrom() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SupportOffsetFrom provides a mock function with given fields:
func (_m *DS) SupportOffsetFrom() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UseDefaultMapping provides a mock function with given fields: _a0, _a1
func (_m *DS) UseDefaultMapping(_a0 *dads.Ctx, _a1 bool) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*dads.Ctx, bool) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Validate provides a mock function with given fields: _a0
func (_m *DS) Validate(_a0 *dads.Ctx) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dads.Ctx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
